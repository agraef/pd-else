#N canvas 432 23 560 669 10;
#X obj 2 3 cnv 15 301 42 empty empty voices 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 3 graph;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 252 42 1;
#X restore 305 3 graph;
#X obj 22 39 cnv 4 4 4 empty empty Polyphonic 0 28 2 18 #e0e0e0 #000000 0;
#X obj 110 39 cnv 4 4 4 empty empty voice 0 28 2 18 #e0e0e0 #000000 0;
#X obj 155 39 cnv 4 4 4 empty empty allocator 0 28 2 18 #e0e0e0 #000000 0;
#X obj 4 642 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 6 344 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 507 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 539 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 102 515 cnv 17 3 17 empty empty n 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 103 352 cnv 17 3 110 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 4 581 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X obj 103 466 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 185 350 list - MIDI note messages (note and velocity pair), f 56;
#X text 125 406 retrig <float> - non zero sets to retrigger mode., f 66;
#X text 179 420 clear - clears memory without output, f 57;
#X text 179 434 flush - clears memory and output hanging notes, f 57;
#X text 125 392 offset <float> - sets index offset (in the context of "list" mode), f 66;
#X text 185 515 list - note messages, f 57;
#X text 179 364 float - note pitch values, f 57;
#X text 179 466 float - note velocity values, f 57;
#X text 161 546 1) float - sets number of voices (default 1);
#X text 161 561 2) float - non zero sets voice stealing (default 0);
#X text 143 588 -rel <float>: sets release time in ms (default 0);
#X text 143 378 rel <float> - sets a release time in ms, f 63;
#X text 125 448 voices <float> - sets number of voices (in list mode only), f 66;
#X text 30 280 see also:;
#X obj 103 487 cnv 17 3 17 empty empty 2 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 179 487 float - release time in ms, f 57;
#X text 124 603 -retrig <float>: sets to retrigger mode <0 \, 1 or 2> (default 0), f 63;
#X text 180 621 -split: sets to split mode, f 49;
#X obj 197 288 else/display;
#X obj 278 288 else/display;
#X obj 197 258 else/voices 2, f 14;
#X obj 135 201 notein;
#X obj 135 225 pack;
#X obj 197 186 else/keyboard 22 60 1 4 1 0 empty empty;
#X text 193 316 voices;
#X text 274 317 extra voices;
#X text 293 256 <-- 1st argument is the number of voices, f 20;
#N canvas 451 76 825 426 example 0;
#X obj 140 317 else/display;
#X msg 97 200 60 \$1;
#X obj 97 168 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X obj 140 242 else/display;
#X obj 140 168 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X obj 184 168 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X obj 230 168 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X msg 140 200 61 \$1;
#X msg 184 200 62 \$1;
#X msg 230 200 63 \$1;
#X msg 49 248 offset \$1;
#X obj 49 225 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X msg 193 263 voices \$1;
#X msg 193 237 2;
#X msg 233 237 4;
#X obj 215 315 else/display;
#X obj 140 289 else/voices 4;
#X obj 394 160 else/keyboard 17 80 2 4 0 0 empty empty;
#N canvas 470 55 378 320 random 0;
#X obj 86 246 pack f f;
#X obj 86 283 outlet;
#X obj 50 19 inlet;
#X obj 50 44 expr random(60 \, 72) \; random(90 \, 127) \; random(750 \, 1250);
#X obj 86 221 makenote;
#X obj 183 116 expr $f1 + random(2 \, 5);
#X obj 199 140 expr $f1 + random(2 \, 5);
#X obj 217 164 expr $f1 + random(2 \, 5);
#X connect 0 0 1 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 3 0 5 0;
#X connect 3 1 4 1;
#X connect 3 2 4 2;
#X connect 4 0 0 0;
#X connect 4 1 0 1;
#X connect 5 0 6 0;
#X connect 5 0 4 0;
#X connect 6 0 7 0;
#X connect 6 0 4 0;
#X connect 7 0 4 0;
#X restore 394 132 pd random chords;
#X obj 394 102 bng 18 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X text 515 297 According to the voice index (the first element in the list sent by [voices]) \, the MIDI note messages are routed to different instances of "voice.pd"., f 43;
#X obj 394 294 clone 4 voice 4;
#X obj 395 331 else/out~;
#X obj 394 265 else/voices 4 1;
#X text 515 349 check clone's help file and click on in to open the patch., f 43;
#X text 47 31 [voices] outputs a list with voice index \, pitch and velocity. You can also change the number of voices with the "voices" message \, which causes the object to flush and clear its memory. The index offset is 0 by default and you can set a different one with the "offset" message., f 51;
#X text 515 261 Here [voices] feeds [clone] \, which loads 4 instances of a patch named "voice.pd"., f 43;
#X obj 319 160 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X msg 319 185 steal \$1;
#X text 386 32 You can set the object to "voice stealing" mode with the second argument or the "steal" message. This mode forces a note off message on the first allocated voice so the extra incoming voice "steals" it (just like [poly~]).;
#X text 538 98 [voices] is particularly useful in conjunction with [clone] to implement polyphonic synths., f 32;
#X text 47 107 After a voice is allocated \, the object needs to receive a corresponding note-off message so that voice can be used again., f 51;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X connect 3 0 16 0;
#X connect 4 0 7 0;
#X connect 5 0 8 0;
#X connect 6 0 9 0;
#X connect 7 0 3 0;
#X connect 8 0 3 0;
#X connect 9 0 3 0;
#X connect 10 0 16 0;
#X connect 11 0 10 0;
#X connect 12 0 16 0;
#X connect 13 0 12 0;
#X connect 14 0 12 0;
#X connect 16 0 0 0;
#X connect 16 1 15 0;
#X connect 17 0 23 0;
#X connect 18 0 17 0;
#X connect 19 0 18 0;
#X connect 21 0 22 0;
#X connect 21 1 22 1;
#X connect 23 0 21 0;
#X connect 27 0 28 0;
#X connect 28 0 23 0;
#X restore 466 239 pd example;
#N canvas 609 153 435 360 split 0;
#X obj 124 193 else/display;
#X obj 182 193 else/display;
#X obj 241 192 else/display;
#X text 123 222 voice 1;
#X text 184 222 voice 2;
#X text 242 222 extra;
#X obj 124 71 else/keyboard 25 80 1 4 1 0 empty empty;
#X obj 124 167 else/voices -split 2;
#X text 39 19 In "split" mode \, [voices] allocates the given number of voices and outputs each one via separate inlets. Extra voices are sent to the rightmost outlet.;
#X msg 55 121 steal \$1;
#X obj 55 98 tgl 16 0 empty empty empty 0 -8 0 10 #fcfcfc #000000 #000000 0 1;
#X text 54 258 By the way \, the rightmost outlet (in regular or split mode) can still send messages when in "voice stealing" mode. This happens when a voice has been stolen but (as you haven't sent the object a note off message). Then \, when you eventually send a note off message \, the object won't find a corresponding note on message and will output that message as an "extra"., f 54;
#X connect 6 0 7 0;
#X connect 7 0 0 0;
#X connect 7 1 1 0;
#X connect 7 2 2 0;
#X connect 9 0 7 0;
#X connect 10 0 9 0;
#X restore 478 261 pd split;
#N canvas 536 81 503 350 retrigger 0;
#X text 81 96 - retrig <0>:;
#X text 81 122 - retrig <1>:;
#X text 165 122 retrigger on the same voice allocation, f 43;
#X text 81 137 - retrig <2>:;
#X text 165 137 retrigger on a new voice allocation, f 43;
#X text 165 96 (default) don't retrigger and send repeated notes ons to "extra" outlet, f 43;
#X text 64 25 [voices] has 3 different retrigger modes \, which are ways of handling repeated note on messages. In this context \, a repeated note on is a note that hasn't had a note off message to free its voice allocation. The modes are:, f 56;
#N canvas 659 114 463 458 retrig_0 0;
#X obj 130 353 else/display;
#X obj 205 353 else/display;
#X obj 130 124 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 265 183 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 2;
#X text 290 182 sustain;
#X obj 130 247 pack float float;
#X obj 130 217 else/suspedal -retrig 3;
#X obj 265 156 loadbang;
#X obj 130 280 else/display;
#X text 203 382 extra;
#X obj 130 323 else/voices 2;
#X text 39 32 The first example below is the default behaviour (retrig 0). This setting allows you to route repeated notes via the rightmost outlet. Test with [keyboard] by pressing the same note. For that \, we use [suspedal] in retrig mode 3 \, which sends note off for all repeated note ons when the sustain is switched off., f 63;
#X connect 2 0 6 0;
#X connect 3 0 6 2;
#X connect 5 0 8 0;
#X connect 6 0 5 0;
#X connect 6 1 5 1;
#X connect 7 0 3 0;
#X connect 8 0 10 0;
#X connect 10 0 0 0;
#X connect 10 1 1 0;
#X restore 196 237 pd retrig_0;
#X text 179 189 See examples in the subpatches below:, f 19;
#N canvas 616 116 476 376 retrig_1 0;
#X obj 147 98 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 282 157 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 2;
#X text 307 156 sustain;
#X obj 147 315 else/display;
#X obj 282 315 else/display;
#X obj 147 247 else/display;
#X obj 147 221 pack float float;
#X obj 282 130 loadbang;
#X obj 147 191 else/suspedal -retrig 1;
#X text 285 342 extra;
#X obj 147 285 else/voices -retrig 1 2;
#X text 28 22 In retrigger mode 1 \, [voices] sends repeated note on messages to the same voice number. No note off is given prior to the repeated note. Here we use [suspedal] in mode "1" \, wich outputs a single note off message when turned off., f 70;
#X connect 0 0 8 0;
#X connect 1 0 8 2;
#X connect 5 0 10 0;
#X connect 6 0 5 0;
#X connect 7 0 1 0;
#X connect 8 0 6 0;
#X connect 8 1 6 1;
#X connect 10 0 3 0;
#X connect 10 1 4 0;
#X restore 196 268 pd retrig_1;
#N canvas 657 188 509 397 retrig_2 0;
#X obj 92 106 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 227 165 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 2;
#X text 252 164 sustain;
#X obj 92 323 else/display;
#X obj 239 323 else/display;
#X obj 92 255 else/display;
#X obj 92 229 pack float float;
#X obj 227 138 loadbang;
#X text 242 350 extra;
#X obj 92 199 else/suspedal -retrig 3;
#X text 75 18 In retrigger mode 2 \, each repeated note alternates through the allocated voices. We have [suspedal] in retrigger mode 3 \, which send note off messages for all note ons are given., f 40;
#X obj 92 293 else/voices -retrig 2 2 1;
#X connect 0 0 9 0;
#X connect 1 0 9 2;
#X connect 5 0 11 0;
#X connect 6 0 5 0;
#X connect 7 0 1 0;
#X connect 9 0 6 0;
#X connect 9 1 6 1;
#X connect 11 0 3 0;
#X connect 11 1 4 0;
#X restore 196 299 pd retrig_2;
#X restore 455 283 pd retrigger;
#N canvas 705 159 469 361 release 0;
#X obj 92 273 else/display;
#X obj 151 273 else/display;
#X obj 92 130 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 210 273 else/display;
#X obj 269 273 else/display;
#X obj 329 273 else/display;
#X obj 258 160 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1000;
#X obj 258 188 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X msg 258 210 rel \$1;
#X obj 329 206 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 41 65 This is useful if you want to wait for a release envelope to finish before using that voice allocation for a new note. Set the release time in ms with the '-rel' flag \, 'rel' message or right inlet., f 65;
#X obj 92 246 else/voices -split -rel 1000 4, f 40;
#X text 41 23 You can set a release time to prevent a note off from freeing a voice allocation. This keeps it allocated for that period of time after a note off is sent., f 65;
#X text 382 204 release;
#X connect 2 0 11 0;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 8 0 11 0;
#X connect 9 0 11 2;
#X connect 11 0 0 0;
#X connect 11 1 1 0;
#X connect 11 2 3 0;
#X connect 11 3 4 0;
#X connect 11 4 5 0;
#X restore 467 304 pd release;
#X obj 31 303 else/mono;
#X text 36 84 [voices] is used to implement voice allocation in polyphonic synths. It's kinda like Pd Vanilla's [poly] object \, but with more functionalities. By default \, it outputs the voice information as a list with: voice index \, pitch and velocity. This is similar to [poly] which outputs an unpacked list \, but [voices] can also route the voices to different outlets in "split" mode., f 79;
#X text 36 145 The number of voices is set via the 1st argument and the list of voices is sent to the left outlet. The right outlet outputs note messages for the extra voices., f 79;
#X connect 41 0 39 0;
#X connect 41 1 40 0;
#X connect 42 0 43 0;
#X connect 42 1 43 1;
#X connect 43 0 41 0;
#X connect 44 0 41 0;
